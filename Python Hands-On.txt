import random
x = 4
print(x)
x = "John"
print(x)
a = str(3)
b = int(3)
c = float(3)
print(a)
print(b)
print(c)
x, y, z = "abc", "def", "ghi"
print(x)
print(y)
print(z)
x = y = z = "John"
print(x)
print(y)
print(z)
fruits = ["apple", "berry", "orange"]
x, y, z = fruits
print(x)
print(y)
print(z)
y= 2.0
print(type(x))
print(type(y))
print(random.randrange(1,11))

print ('Hello')
print ("Hello")
a = "Hello"
print (a)
a = """Hello
World
!!!"""
print (a)
b = "Hello World !!!"
print (b[6:11])
print (b[:6])
print (b[6:])
print (b[-9:-4])
print (b[6:11:2])
print (b[4::-1])
print (b.upper())
print (b.lower())
print (b.split(" "))
print (b.replace("H", "J"))
c = b.split(" ")[0] + " "+ b.split(" ")[2]
print (c)
c = 10
d = "My age is " + str(c)
print (d)
d = "My age is {}"
print (d)
print (d.format(c))
a = "Hello"
print (d.format(c) + " " + a)
d = "My age is {}, {} {}"
print (d.format(c,a,"World"))
txt = "he said \n\"Hey\"\t\\"
print (txt)
print (txt.capitalize())
print (txt.casefold())
print (b.center(100, "."))
print (b.count('l', 0, 5))
print (b.endswith("!!!"))
print (b.endswith("o", 0, 5))
print (b.find("World"))
b = "Hello World !!! Hello"
print (b.find("Hello",1))
print (b.find("Hello",1, 15))
print (b.index("Hello"))
txt = "Apples are {price1} rupees and oranges are {price2} rupees"
print (txt.format(price2 = 30, price1 = 100))
d = "Myageis50â‚¹"
print (b.isalnum())
print (a.isalnum())
print (d.isalnum())
print (d.isalpha())
print (a.isalpha())
print (d.isascii())
e = "0987654321"
print (e.isdecimal())
print (e.isdigit())
print (e.isnumeric())
a = "hello world"
print (a.islower())

txt = "    "
x = txt.isspace()
print (x)
txt = "HELLO WORLD"
x= txt.isupper()
print (x)
x = txt.lower()
print (x)
y = x.upper()
print (y)
x = txt.replace("HELLO", "GOOD DAY")
print (x)
txt = "a b c d e a b c d"
x = txt.replace(" ",",",3)
print (x)
txt = "Good Morning India"
x = txt.split(" ")
print (x[0] + " " + x[1])
txt = "I like music\nI like movies"
txt1 = """I like music
I like movies"""
print (txt)
x = txt.splitlines()
print (x)
x = txt1.splitlines()
print (x)
x = txt.startswith("I li")
print (x)
txt = "       Hello World        "
print(txt.strip(" "))
txt = txt.strip(" ")
print (txt)
x = txt.swapcase()
print (x)

print (10 > 9)
print (10 == 9)
print (10 < 9)
a = 5
b = 10
if b>a:
    print("b is greater than a")
else:
    print("b is lesser than a")
print(bool("Hello"))
print(bool(None))
print(bool(3))
print(bool(""))
print(bool(0))
print(bool([]))
print(bool(()))
print(bool({}))
print(10 + 5)
print("10" + "5")
print(10 - 5)
print(10 * 5)
print(11 / 5)
print(11 // 5)
print(2**7)
print(11 % 5)
x = 10
print(x)
x += 5
print (x)
x -=5
print (x)
x *=3
print (x)
x /= 10
print (x)
x *= 5
print (x)
x %= 6
print (x)
x **= 3
print (x)
x //= 5
print (x)
a = ["apple", 50, "orange"]
print(a)
print(len(a))
b = list(("a", "b", "c"))
print(b)
print(type(b))
print(a[0])
print(a[1])
print(a[2])
print()
print(a[-1])
print(a[-2])
print(a[-3])
print(a[1:3])
print(a[:3])
print(a[2:])
print(a[-2:-4:-1])
if "orange" in a:
    print ("yes, 'orange' is in the list")
a[1] = "banana"
print(a)
a[2:4] = ["berry", "watermelon"]
print(a)
a[2:3] = ["peach", "carrot"]
print(a)
a.append("tomato")
print(a)
a.insert(1, "dragon fruit")
print(a)
a.extend(b)
print(a)
a.remove("a")
print(a)
a.pop(8)
print(a)
a.pop()
print(a)
print(b)
del b
b = list(("a", "b", "c"))
print(b)
b.clear()
print(b)
for item in a:
    print (item)
print()
for i in range(len(a)):
    print(a[i])

a = ["apple", "banana", "orange", "blue", "grapes"]
b = list(("a", "b", "c"))
i = 0
while i < len(a):
    print(a[i])
    i += 1
print ("--------------------------------------------")
[print(x) for x in a]
print ("--------------------------------------------")
newlist = []
for x in a:
    if "a" in x:
        newlist.append(x)
print(newlist)
print ("--------------------------------------------")
newlist1 = [x for x in a if "a" in x]
print(newlist1)
newlist1 = [x for x in a if x!="apple"]
print(newlist1)
newlist1 = [x for x in a]
print(newlist1)
newlist1 = [x for x in range(10)]
print(newlist1)
newlist1 = [x for x in range(1,10) if x < 7]
print(newlist1)
newlist1 = [x.upper() for x in a]
print (newlist1)
newlist1 = ['hello' for x in range(5)]
print (newlist1)
newlist1 = [x if x != "grapes" else "onion" for x in a]
print (newlist1)
print(a)
b = a.sort()
print (b)
b = a
print(b)
b= a.copy()
print(b)
b = list(a)
print(b)
c = a + b
print (c)
print (type(a))
print (type(b))
print (type(c))
for x in a:
    b.append(x)
print (b)
x = b.count("apple")
print(x)
b.extend(a)
print(b)
print()
d = [1,2,3,4,5,6]
print(d[::-1])
print(a)
print(a[::-1])

write a Python program to find the largest number in given list.
a = [1, 20, 5, 55, 96]
a.sort()
print(a)
print("largest number is:", a[-1])

tuple1 = ("apple", "banana", "cherry")
tuple2 = ("onion", "tomato", "bean")
print(tuple1)
print(type(tuple1))
print(len(tuple1))
temptuple = tuple(("apple", "banana", "cherry"))
print(temptuple)
print(type(temptuple))
print(temptuple[0])
temp = list(temptuple)
temp.append("orange")
temp.append("grapes")
temptuple = tuple(temp)
print(temptuple)
print(type(temptuple))
(a,b,c,d,e) = temptuple
print(a +" "+ b +" "+c+" "+d+" "+e)
(a,b,*c) = temptuple
print(a +" "+ b )
print(c)
for x in temptuple:
    print(x)
print("------------------------------------------------------------")
for x in range(len(temptuple)):
    print(temptuple[x])
print("------------------------------------------------------------")
x = 0
while x < len(temptuple):
    print(temptuple[x])
    x += 1
tuple3 = tuple1 + tuple2
print (tuple3)
tuple4 = tuple1 * 3
print (tuple4)
print (tuple4.count("apple"))
print (tuple4.index("cherry"))

Given a Tuple, find the frequency of each element.

set1 = {"apple", "banana", "cherry", "apple", 1, True, False, 0}
tempset = {2,3,4,5,6,7,8,9}
templist = ["abc", "def", "ghi"]
print (set1)
print (type(set1))
print (len(set1))
for x in set1:
    print (x)
set1.add("orange")
print (set1)
set1.update(tempset)
print(set1)
set1.update(templist)
print(set1)
set1.remove("abc")
print(set1)
set1.discard("def")
print(set1)
set1.pop()
print(set1)
tempset.clear()
print(tempset)
del tempset
tempset = {2,3,4,5,6,7,8,9}
set2 = set1.union(tempset)
print (set2)
set1 = {"apple", "banana", "cherry", "apple", 1, True, False, 0}
tempset = {1,0,2,3,4,5,6,7,8,9}
a = set1.difference(tempset)
print(a)
a = set1.intersection(tempset)
print (a)
#set1.difference_update(tempset)
#print(set1)
set1.intersection_update(tempset)
print(set1)

Given two lists, find the missing and additional values in both the lists.

dict1 = {"brand":"Apple", "model":"MacBook", "year":2023}
print(dict1)
print(dict1["brand"])
print(dict1.get('brand'))
print(dict1.keys())
dict1["colour"] = "grey"
print(dict1)
print(dict1.values())
print(dict1.items())
if "year" in dict1:
    print("Year key is present in the dictionary")
dict1.update({"colour" : "black"})
print(dict1)
dict1.pop("year")
print (dict1)
dict1.popitem()
print(dict1)
del dict1["model"]
print(dict1)
dict1.clear()
print(dict1)
dict1 = {"brand":"Apple", "model":"MacBook", "year":2023}
dict1["colour"] = "grey"
for x in dict1:
    print (str(x) + "->"+ str(dict1[x]))
    print()
for x in dict1.values():
    print(x)
for x in dict1.keys():
    print(x)
dict2 = dict1.copy()
print(dict2)
dict3 = dict(dict1)
print(dict3)
info = {"name":{"fname": "John", "lname":"Wick"}, "age":54}
print(info["name"]["fname"]+ " " + info["name"]["lname"])
company = {'emp1':{'id':1,'dep':1},'emp2':{'id':2,'dep':2},'emp3':{'id':3,'dep':3}}
print("id   dep")
print(str(company["emp1"]["id"]) +"\t"+ str(company["emp1"]["dep"]))
print(str(company["emp2"]["id"]) +"\t"+ str(company["emp2"]["dep"]))
print(str(company["emp3"]["id"]) +"\t"+ str(company["emp3"]["dep"]))


a = 33
b = 200
if b > a:
  print("b is greater than a")

if b > a:
  print("b is greater than a")
elif a == b:
  print("a and b are equal")

if b > a:
  print("b is greater than a")
elif a == b:
  print("a and b are equal")
else:
  print("a is greater than b")

if b > a:
  print("b is greater than a")
else:
  print("b is not greater than a")
  
if a > b: print("a is greater than b")

print("A") if a > b else print("B")

print("A") if a > b else print("=") if a == b else print("B")

a = 200
b = 33
c = 500
if a > b and c > a:
  print("Both conditions are True")
if a > b or a > c:
  print("At least one of the conditions is True")
if not b > a:
  print("b is NOT greater than a")
if b > a:
  pass
i = 1
while i < 6:
    print(i)
    i += 1
print (i)
print ()
i = 1
while i < 6:
    print(i)
    if i == 3:
        break
    i += 1
print (i)
i = 0
while i < 6:
    i += 1
    if i == 3:
        continue
    print(i)
i = 1
while i < 6:
    print (i)
    i += 1
else:
    print ("i is no longer lesser than 6")


x = "apple"
for i in x:
    print (i)
list1 = ["apple", "banana", "cherry", "orange", "grapes"]
list2 = [1,2,3]
for x in list1:
    if x == "orange":
        break
    print (x)
for x in list1:
    if x == "orange":
        continue
    print (x)
for x in range (6):
    print (x)
for x in range(2,6):
    print (x)
for x in range(1,21,2):
    print("\t" + str(x))
for x in range(10,0,-1):
    print(x)
for x in range(0,4):
    print ("\t" + str(x))
else:
    print ("iteration completed")
for x in list2:
    for y in list1:
        print (str(x) + "->" + str(y))
for x in range (2):
    pass

def new_function():
    print("Hello World")
new_function()
    
def name(fname):
    print ("First name is:" + fname)
name("John")
name("Adam")
name("Emily")

def name(fname , lname):
    print ("First name is:" + fname + "and last name is:" + lname)
name("John","Mcarthy")
name("Will", "Brooke")

def name(*arg):
    print("The names are:")
    count = 1
    for i in arg:
        print(str(count) + "->"+ i)
        count +=1
name("John", "Will")

def name (lname, fname, mname):
    print (fname + " " + mname + " " + lname)
name(fname = "Harry", mname = "James", lname = "Potter")

def name(**name):
    print (name["fname"] + ' ' + name["mname"] + " " + name["lname"])
name(fname = "Harry", mname = "James", lname = "Potter", age = 19, year = 8) 

def name (fname = "Adam"):
    print (fname)
name ("John")
name ()
name ()
name ("Will")

def fruits(x):
    for i in x:
        print ("\t" + i)
fruits(list1)

def total(price):
    return price * 1.05
print (total(100))
print (total(1000))

def factorial(n):
    if n==0:
        return 1
    else:
        return (n * factorial(n-1))
print (factorial(5))
print (factorial(0))

import math
x = lambda a : a+10
print (x(5))
x = lambda a, b: a*b
print (x(2,3))

def fun(n):
    return lambda a : a * n
trip = fun(3)
doub = fun(2)
print (doub(9))
print (trip(9))

car1 = "BMW"
car2 = "Mercedes"
car3 = "Ford"
car4 = "Volvo"

car = [car1, car2, car3, car4, "Toyota"]
print (car)

a = min(2,6,6,7,3,21,1,0,-2)
b = max(2,6,6,7,3,21,1,0,-2)
print(a)
print(b)
x = abs(-27.9083)
print(x)
x = pow(2,10)
print(x)
x = math.sqrt(256)
print(x)
print (math.ceil(1.2))
print (math.floor(1.7))
print (math.pi)

class MyClass:
    x = 5
a = MyClass()
print(a.x)

class Person:
    def __init__ (self, name, age):
        self.name = name
        self.age = age
    
p1 = Person("John", 40)
print(p1.name + " " + str(p1.age))
p2 = Person("Will", 26)
print(p2.name + " " + str(p2.age))
print (p1)

class Person:
    def __init__ (self, name, age):
        self.name = name
        self.age = age
    
    def __str__(self):
        return f"{self.name}({self.age})"
p1 = Person("John", 40)
p2 = Person("Will", 26)
print (p1)
print (p2)

class Person:
    def __init__ (self, name, age):
        self.name = name
        self.age = age
        
    def saymyname(self):
        print("Hello my name is " + self.name + " and my age is " + str(self.age) + "!!!")

print ("---------------------------------------------------------------------")
p1 = Person("John", 40)
p1.age=30
p1.saymyname()
p2 = Person("Will", 26)
p2.saymyname()

print ("---------------------------------------------------------------------")

class Person:
    def __init__ (abc, name, age):
        abc.name = name
        abc.age = age
        
    def saymyname(de):
        print("Hello my name is " + de.name + " and my age is " + str(de.age) + "!!!")

p1 = Person("John", 40)
p1.age = 30
p1.saymyname()
p2 = Person("Will", 26)
p2.saymyname()

print ("---------------------------------------------------------------------")
del p1.age
del p1

Write a Python function to reverse a list at a specific location.
Write a Python function to find the kth largest element in a list.
Write a Python function to remove duplicates from a list while preserving the order.
Write a Python a function to find the union and intersection of two lists.
Write a Python program to find the first non-repeated element in a list.


try:
    f = open('testfile','w')
    f.write('Test write this')
except IOError:
    # This will only check for an IOError exception and then execute this print statement
    print("Error: Could not find file or read data")
else:
    print("Content written successfully")
    f.close()

try:
    f = open('testfile','r')
    f.write('Test write this')
except IOError:
    # This will only check for an IOError exception and then execute this print statement
    print("Error: Could not find file or read data")
else:
    print("Content written successfully")
    f.close()

try:
    f = open('testfile','r')
    f.write('Test write this')
except:
    # This will check for any exception and then execute this print statement
    print("Error: Could not find file or read data")
else:
    print("Content written successfully")
    f.close()

try:
    f = open("testfile", "w")
    f.write("Test write statement")
    f.close()
finally:
    print("Always execute finally code blocks")

def askint():
    try:
        val = int(input("Please enter an integer: "))
    except:
        print("Looks like you did not enter an integer!")

    finally:
        print("Finally, I executed!")
    print(val)
askint()

def askint():
    try:
        val = int(input("Please enter an integer: "))
    except:
        print("Looks like you did not enter an integer!")
        val = int(input("Try again-Please enter an integer: "))
    finally:
        print("Finally, I executed!")
    print(val)
askint()

def askint():
    while True:
        try:
            val = int(input("Please enter an integer: "))
        except:
            print("Looks like you did not enter an integer!")
            continue
        else:
            print("Yep that's an integer!")
            break
        finally:
            print("Finally, I executed!")
        print(val)
askint()

def askint():
    while True:
        try:
            val = int(input("Please enter an integer: "))
        except:
            print("Looks like you did not enter an integer!")
            continue
        else:
            print("Yep that's an integer!")
            print(val)
            break
        finally:
            print("Finally, I executed!")
askint()



import csv

data = open('example.csv')
csv_data = csv.reader(data)
data_lines = list(csv_data)

data = open('example.csv',encoding="utf-8")
csv_data = csv.reader(data)
data_lines = list(csv_data)
data_lines[:3]
for line in data_lines[:5]:
    print(line)
len(data_lines)
all_emails = []
for line in data_lines[1:15]:
    all_emails.append(line[3])
print(all_emails)

full_names = []

for line in data_lines[1:15]:
    full_names.append(line[1]+' '+line[2])
full_names

# newline controls how universal newlines works (it only applies to text
# mode). It can be None, '', '\n', '\r', and '\r\n'. 
file_to_output = open('to_save_file.csv','w',newline='')
csv_writer = csv.writer(file_to_output,delimiter=',')
csv_writer.writerow(['a','b','c'])
csv_writer.writerows([['1','2','3'],['4','5','6']])
file_to_output.close()



f = open('to_save_file.csv','a',newline='')
csv_writer = csv.writer(f)
csv_writer.writerow(['new','new','new'])
f.close()


# note the capitalization
import PyPDF2


# Notice we read it as a binary with 'rb'
f = open('Working_Business_Proposal.pdf','rb')
pdf_reader = PyPDF2.PdfFileReader(f)
pdf_reader.numPages
page_one = pdf_reader.getPage(0)
page_one_text = page_one.extractText()
page_one_text
f.close()


f = open('Working_Business_Proposal.pdf','rb')
pdf_reader = PyPDF2.PdfFileReader(f)
first_page = pdf_reader.getPage(0)
pdf_writer = PyPDF2.PdfFileWriter()
pdf_writer.addPage(first_page)
pdf_output = open("Some_New_Doc.pdf","wb")
pdf_writer.write(pdf_output)
f.close()


f = open('Working_Business_Proposal.pdf','rb')

# List of every page's text.
# The index will correspond to the page number.
pdf_text = []

pdf_reader = PyPDF2.PdfFileReader(f)

for p in range(pdf_reader.numPages):
    page = pdf_reader.getPage(p)
    pdf_text.append(page.extractText())
    
pdf_text

print(pdf_text[3])